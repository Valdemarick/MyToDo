// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyToDo.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyToDo.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230514172930_AddIsActiveColumn")]
    partial class AddIsActiveColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommentMember", b =>
                {
                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("CommentId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("CommentMember");
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TaskId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RegisteredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8561f4aa-6657-4ce0-979c-dbb33f0c82c4"),
                            Name = "TaskRead"
                        },
                        new
                        {
                            Id = new Guid("60d8770e-6a07-4f63-8b51-acd48f8f52ed"),
                            Name = "TaskManagement"
                        },
                        new
                        {
                            Id = new Guid("cd31bd2b-f856-4d0f-b56c-f88255c5075e"),
                            Name = "CommentLeaving"
                        },
                        new
                        {
                            Id = new Guid("8dda4918-6116-4425-9456-9561bf86b5ab"),
                            Name = "UserManagement"
                        },
                        new
                        {
                            Id = new Guid("76b0e092-828e-4bd1-bf85-9742eac292ca"),
                            Name = "UserRead"
                        },
                        new
                        {
                            Id = new Guid("7a921150-0590-44b9-998a-7a4243dff8b9"),
                            Name = "TagRead"
                        },
                        new
                        {
                            Id = new Guid("645f46b9-bf73-4573-a8e5-75209991fe52"),
                            Name = "TagManagement"
                        });
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("89732d3f-20c6-4bad-b629-8214cea141cf"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("1a8b891d-ffc7-4d47-839c-2957f59e4584"),
                            Name = "Contributor"
                        },
                        new
                        {
                            Id = new Guid("f2bac65d-90d4-4dde-9837-e8f8b631a982"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ExecutorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .IsUnique();

                    b.HasIndex("ExecutorId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.TaskCreator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.ToTable("TaskCreators", (string)null);
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.TaskExecutor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.ToTable("TaskExecutors", (string)null);
                });

            modelBuilder.Entity("TagTask", b =>
                {
                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uuid");

                    b.HasKey("TagsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("TagTask");
                });

            modelBuilder.Entity("CommentMember", b =>
                {
                    b.HasOne("MyToDo.Domain.Entities.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyToDo.Domain.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MyToDo.Domain.Entities.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Member", b =>
                {
                    b.HasOne("MyToDo.Domain.Entities.Role", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("MyToDo.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyToDo.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Task", b =>
                {
                    b.HasOne("MyToDo.Domain.Entities.TaskCreator", "Creator")
                        .WithOne("Task")
                        .HasForeignKey("MyToDo.Domain.Entities.Task", "CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyToDo.Domain.Entities.TaskExecutor", "Executor")
                        .WithOne("Task")
                        .HasForeignKey("MyToDo.Domain.Entities.Task", "ExecutorId");

                    b.Navigation("Creator");

                    b.Navigation("Executor");
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.TaskCreator", b =>
                {
                    b.HasOne("MyToDo.Domain.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.TaskExecutor", b =>
                {
                    b.HasOne("MyToDo.Domain.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTask", b =>
                {
                    b.HasOne("MyToDo.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyToDo.Domain.Entities.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Role", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.Task", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.TaskCreator", b =>
                {
                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("MyToDo.Domain.Entities.TaskExecutor", b =>
                {
                    b.Navigation("Task")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
